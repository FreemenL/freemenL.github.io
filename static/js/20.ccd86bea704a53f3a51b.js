(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{"./node_modules/_webpack@4.27.1@webpack/buildin/global.js":function(e,n,t){e.exports=t("dll-reference _dll_dllLibrary__pro")(19)},"./src/pages/Rules/intro/index.tsx":function(e,n,t){"use strict";t.r(n);var a,s=t("./node_modules/_tslib@1.14.1@tslib/tslib.es6.js"),c=t("./node_modules/_react@16.8.2@react/index.js"),l=t.n(c),o=t("./node_modules/_emptyd@0.1.7@emptyd/EcodeHighlight/index.tsx"),s=(a=c.Component,s.d(r,a),r.prototype.render=function(){return l.a.createElement(l.a.Fragment,null,l.a.createElement("h1",{className:"e-title"},"empty-desgin 简称 emptyd "),l.a.createElement("p",{className:"empty-line-content"},l.a.createElement("code",{className:"empty-code"},"emptyd"),"是基于",l.a.createElement("code",{className:"empty-code"},"react + typescript + antd"),"的扩展组件库，主要包括",l.a.createElement("code",{className:"empty-code"},"通用小组件、快速开发页面的多风格模板(HOC高阶组件)、通用工具函数、通用样式类")),l.a.createElement("p",{className:"empty-line-content"},l.a.createElement("code",{className:"empty-code"},"emptyd")," 需要搭配",l.a.createElement("code",{className:"empty-code"},"emptyd-admin-webpack")," 脚手架使用， 或者用",l.a.createElement("code",{className:"empty-code"},"处理ts文件的loader"),"处理",l.a.createElement("code",{className:"empty-code"},"node_modules/emptyd"),"目录"),l.a.createElement("p",{className:"empty-line-content"},l.a.createElement("code",{className:"empty-code"},"emptyd"),"支持按需加载，并强烈建议进行按需加载相关配置，配置方式如下"),l.a.createElement("p",{className:"empty-line-content"},"1、下载emptyd的babel插件",l.a.createElement("code",{className:"empty-code"},"babel-plugin-empty-import")),l.a.createElement(o.a,{language:"bash",showNumber:!1},"\n            $cnpm install babel-plugin-empty-import -D\n          "),l.a.createElement("p",{className:"empty-line-content"},"2、在",l.a.createElement("code",{className:"empty-code"},".babelrc"),"中添加如下配置。"),l.a.createElement(o.a,{language:"json",showNumber:!1},'\n             {\n                "presets": [\n                 ...\n                ],\n                "plugins": [\n                  ...,\n                  ["empty-import",{\n                    "libraryName": "emptyd",\n                  }]\n                ]\n              }\n          '),l.a.createElement("h1",{className:"e-title"},"emptyd-admin-webpack 脚手架 v0.0.1 "),l.a.createElement("p",{className:"empty-line-content"},"基于",l.a.createElement("code",{className:"empty-code"}," ","react + typescript + react-router-dom + redux + react-redux + redux-saga + antd + emptyd + less"," "),"的 webpack4 前端开发环境"),l.a.createElement("p",{className:"empty-line-content"},"1、针对不同的",l.a.createElement("code",{className:"empty-code"},"loader"),"采用了多进程编译，指定精确处理的目录和排除的目录，并开启缓存 极大的加快了编译速度。"),l.a.createElement("p",{className:"empty-line-content"},"2、使用",l.a.createElement("code",{className:"empty-code"}," webpack.DllReferencePlugin "),"根据环境自动 提取固定资源，加快编译与打包速度"),l.a.createElement("p",{className:"empty-line-content"},"3、区分生产环境和开发环境,优化代码产出"),l.a.createElement("p",{className:"empty-line-content"},"4、启用",l.a.createElement("code",{className:"empty-code"}," cssmodule "),"默认使用",l.a.createElement("code",{className:"empty-code"}," postcss + postcss-cssnext "),"，内置处理浏览器前缀。"),l.a.createElement("p",{className:"empty-line-content"},"5、启用",l.a.createElement("code",{className:"empty-code"}," tree shaking ")),l.a.createElement("p",{className:"empty-line-content"},"6、启用",l.a.createElement("code",{className:"empty-code"}," scope hoisting ")),l.a.createElement("p",{className:"empty-line-content"},"7、",l.a.createElement("code",{className:"empty-code"},"Babel "),"配有",l.a.createElement("code",{className:"empty-code"}," transform-runtime "),"让代码更优化"),l.a.createElement("p",{className:"empty-line-content"},"8、更改文件,防缓存的hash规则"),l.a.createElement("p",{className:"empty-line-content"},"9、把小图片转成",l.a.createElement("code",{className:"empty-code"},"base64 码 ")),l.a.createElement("p",{className:"empty-line-content"},"10、快速编译，热更新，自动刷新"),l.a.createElement("p",{className:"empty-line-content"},"11、 ",l.a.createElement("code",{className:"empty-code"},"resolve.modules")," 优化模块查找路径"),l.a.createElement("p",{className:"empty-line-content"},"12、 ",l.a.createElement("code",{className:"empty-code"},"optimization splitChunks")," 代码拆分"),l.a.createElement("p",{className:"empty-line-content"},"13、 单独抽离",l.a.createElement("code",{className:"empty-code"},"css"),"文件"),l.a.createElement("p",{className:"empty-line-content"},"14、压缩",l.a.createElement("code",{className:"empty-code"},"css js"),"文件"),l.a.createElement("p",{className:"empty-line-content"},"15、大文件跳过编译 直接拷贝"),l.a.createElement("p",{className:"empty-line-content"},"16、自定义",l.a.createElement("code",{className:"empty-code"},"loader"),"优化文件引入"),l.a.createElement("p",{className:"empty-line-content"},"17、自定义",l.a.createElement("code",{className:"empty-code"},"plugin"),"输出编译产出"),l.a.createElement("p",{className:"empty-line-content"},"18、",l.a.createElement("code",{className:"empty-code"},"nodemon"),"监听配置文件改动"),l.a.createElement("p",{className:"empty-line-content"},"19、系统级的错误提示"),l.a.createElement("p",{className:"empty-line-content"},"20、端口冲突自动切换"),l.a.createElement("p",{className:"empty-line-content"},"21、自动生成编译日志"),l.a.createElement("p",{className:"empty-line-content"},"22、编译结果可视化"),l.a.createElement("p",{className:"empty-line-content"},"23、本地端口运行打包后项目"),l.a.createElement("p",{className:"empty-line-content"},"24、脚手架 配置化"),l.a.createElement("h1",{className:"e-title"}," 脚手架目录结构 "),l.a.createElement(o.a,{language:"markdown"},"\n            ├── build                    # webpack 配置目录\n            │   ├── loaders              # 自定义loader目录\n            │   ├── plugins              # 自定义plugin目录\n            │   ├── template             # html模版目录\n            ├── config                   # 系统配置目录\n            ├── dist                     # 打包资源\n            ├── log                      # 日志目录\n            ├── scripts                  # 运行脚本\n            ├── src                      # 源码目录\n            │   ├── components           # 通用组件目录\n            │   ├── config               # 系统自定义配置 \n            │   ├── pages                # 业务模块代码路径\n            │   ├── public               # 静态资源路径\n            │   ├── router               # 路由相关路径 \n            │   ├── service              # api相关路径\n            │   ├── store                # redux 状态管理相关路径\n            │   ├── styles               # 通用样式文件路径\n            │   ├── index.tsx            # 入口文件 \n            ├── static                   # 静态资路径(直接拷贝的文件)\n            ├── typings                  # ts类型声明文件\n            ├── .babelrc                 # babel配置(预设和插件)\n            ├── .eslintrc.js             # eslint配置\n            ├── package.json             # 项目描述\n            ├── postcss.config.js        # postcss配置\n            └── tsconfig.json            # ts配置\n          "),l.a.createElement("h1",{className:"e-title"},"项目启动"),l.a.createElement("p",{className:"empty-line-content"},"1、环境配置 为了把保证项目正常运行，请自行更新相关环境。"),l.a.createElement("p",{className:"empty-line-content"},"安装",l.a.createElement("code",{className:"empty-code"},"node.js"),"安装",l.a.createElement("code",{className:"empty-code"},"git")),l.a.createElement("p",{className:"empty-line-content"},"2、通过",l.a.createElement("code",{className:"empty-code"},"git"),"拉取代码"),l.a.createElement(o.a,{language:"bash",showNumber:!1},"\n            $ git clone https://github.com/FreemenL/emptyd-admin-webpack.git\n            $ cd emptyd-admin-webpack \n          "),l.a.createElement("p",{className:"empty-line-content"},"3、下载依赖 请确保你的环境配置完成，然后就可以开始以下步骤"),l.a.createElement(o.a,{language:"bash",showNumber:!1},"\n            $ npm install                   # Install project dependencies\n            $ npm start                     # Compile and launch\n          "),l.a.createElement("h1",{className:"e-title"}," 命令说明 "),l.a.createElement("p",{className:"empty-line-content"},"开发过程中，你用得最多的会是npm start，但是这里还有很多其它的处理："),l.a.createElement(o.a,{language:"bash",showNumber:!1},"\n            $ npm start                   # 初始化启动项目（生成Dll文件并启动服务）\n            $ npm run build               # 打包 \n            $ npm run ls                  # 将dist目录在本地8080端口运行 \n            $ npm run upload              # 上传dist目录到服务器 （ 没有配置jenkins等持续集成的情况下方便上传代码 ） \n          "),l.a.createElement("h1",{className:"e-title"},"系统配置说明"),l.a.createElement("p",{className:"empty-line-content"}," ","配置文件位置 ",l.a.createElement("code",{className:"empty-code"},"config/index.js")),l.a.createElement(o.a,{language:"javascript"},"\n            module.exports = {\n              // 模式  dev | run  区别:dev 会开启配置文件监听 run 不会\n              pattern: 'run',\n              // 系统路径配置 相对命令行启动目录 \n              systemPath: {\n                // 入口文件\n                appIndex: 'src/index',\n                // ts配置文件\n                appTsConfig: 'config/tsconfig',\n                // webpack ts配置\n                webpackTsConfig: 'config/tsconfig-for-webpack-config',\n                // 动态链接库\n                appdllLibrary: '_dllLibrary_',\n                // title图标\n                appFavicon: 'src/public/favicon',\n                // 依赖包路径\n                appNodeModules: 'node_modules',\n                // 日志目录\n                appLog: 'log',\n                // 源码目录\n                appSrc: 'src',\n                // 打包路径\n                appBuild: 'dist',\n                // 配置文件目录\n                appConfig: ['build', 'config'],\n                // 自定义loader目录 \n                appLoader: 'build/loaders',\n                // 自定义　依赖包路径下需要awesome-typescript-loader 处理的文件目录\n                appTsLoader: ['node_modules/_free-validator@1.0.7@free-validator', 'node_modules/_freetool@0.0.3@freetool'],\n                // 静态资源路径 存放较大文件 该目录下存放文件会被 CopyWebpackPlugin 直接复制到打包后dist/static 路径\n                appStatic: 'static',\n                // 下不会被 cssmodule 处理的文件路径\n                appExcludeCssModule: [\"prismjs\",'antd', 'normalize.css','animate.css', 'rc-texty', 'nprogress', 'braft-editor', 'rc-queue-anim', 'viewerjs'],\n                // 路径别名相对源码目录\n                appPathAlias: {\n                  '@src': '',\n                  '@config':'config',\n                  '@styles':\"styles\",\n                  '@components': \"components\",\n                  '@actions': \"store/actions\",\n                  '@constants': \"store/constants\",\n                  '@pages': \"pages\",\n                  '@reducers': \"store/reducers\",\n                  '@router': \"router\",\n                  '@store': \"store\",\n                  '@public': \"public\",\n                  '@utils': \"utils\",\n                  '@service': \"service\"\n                }\n              },\n              // 系统常量\n              systemConstant: {\n                // 系统名称\n                title: 'emptyd系统',\n                // html模板文件 路径相对命令行启动目录\n                htmlTemplate: './build/template/index.html'\n              },\n              // 开发环境配置\n              devConfig: {\n                // 本地服务端口 支持同时启动多个服务\n                localServerPort: 8091,\n                // 代理配置\n                proxyTable: {\n                  '/**': {\n                    target: 'http://193.112.220.100',\n                    changeOrigin: true,\n                    secure: true\n                  }\n                }\n              },\n              // 是否生成编译报告  为true时候可在 127.0.0.1:8888查看编译结果\n              bundleAnalyzerReport: false,\n              // 动态连接库中排除\n              dllLibraryExclude: ['free-validator','freetool','antd', 'normalize.css','animate.css'],\n              // 是否开启编译缓存 \n              onCompiltionCache: false,\n              // 是否开启代码检查 \n              onLint: true,\n              // 上传服务器配置\n              remoteServer:{\n                uploadFile:'./dist/**',\n                sshConfig:{\n                  remotePath:'/root/nginx_szcg/website/zhifa/dist',\n                  ssh: { //正式\n                    host: \"129.139.254.333\",\n                    port: 22,\n                    username: 'root',\n                    password: 'xxxxxxxxxxxxx'\n                  }, \n                  commands: [\n                     //删除现有文件\n                    'rm -rf /root/nginx_szcg/website/zhifa/dist'\n                  ]\n                }\n              }\n            }\n            \n          "),l.a.createElement("h1",{className:"e-title"},"eslint 规则"),l.a.createElement(o.a,{language:"javascript"},"\n           rules: {\n            /* react */\n            'react/no-access-state-in-setstate': 2,\n            'react/no-children-prop': 0,\n            'react/no-array-index-key': 2,\n            'react/no-direct-mutation-state': 2,\n            'react/no-find-dom-node': 2,\n            'react/no-redundant-should-component-update': 2,\n            'react/no-render-return-value': 2,\n            'react/no-typos': 2,\n            'react/no-string-refs': 2,\n            'react/no-this-in-sfc': 0,\n            'react/no-unescaped-entities': 2,\n            'react/no-unused-state': 2,\n            'react/no-will-update-set-state': 2,\n            'react/react-in-jsx-scope': 2,\n            'react/require-render-return': 2,\n            'react/sort-comp': 2,\n            'react/style-prop-object': 2,\n            'react/void-dom-elements-no-children': 2,\n            /*   jsx   */\n            'react/jsx-filename-extension': [1, { 'extensions': ['.ts', '.tsx'] }], // 限制文件后缀名必须为ts|tsx\n            'react/jsx-max-depth': [2, { 'max': 20 }], // 限制jsx 最大嵌套层次 20\n            'react/jsx-max-props-per-line': [2, { 'maximum': 5,'when': 'multiline' }], // Limit maximum of props on a single line in JSX \n            'react/jsx-no-bind': 0, // 不允许的jsx中 使用bind 和 箭头函数 \n            'react/jsx-no-comment-textnodes': 2, // 中必须使用{/**/} 的注释方式\n            'react/jsx-no-duplicate-props': 2, // 防止jsx 中重复的属性名 \n            'react/jsx-no-literals': 0, // 防止在 JSX 中使用字符串文字\n            'react/jsx-no-undef': [ 2 , { 'allowGlobals': true }], // 在JSX中禁止未声明的变量\n            'react/jsx-pascal-case': 2, // 为用户定义的JSX组件强制使用PascalCase\n            'react/jsx-props-no-multi-spaces': 0, // 强制所有属性之间以及标记名称和同一行中的第一个属性之间只有一个空格。\n            'react/jsx-uses-react': 2, // 防止React被错误地标记为未使用\n            'react/jsx-uses-vars': 2, // 防止JSX中使用的变量被错误地标记为未使用\n            /*  js  */\n            'no-console': 1,\n            'no-debugger': 0,\n            'no-dupe-keys': 0, // 禁止对象字面量中出现重复的 key\n            'no-extra-parens': 0, // 禁止不必要的括号\n            'no-unsafe-finally': 0, // 禁止在 finally 语句块中出现控制流语句\n            'no-empty-character-class': 0, // 禁止在正则表达式中使用空字符集\n            'no-prototype-builtins': 0, // 禁止直接调用 Object.prototypes 的内置属性\n            'no-unexpected-multiline': 0, // 禁止出现令人困惑的多行表达式\n            'valid-jsdoc': 0, // 强制使用有效的 JSDoc 注释\n            'getter-return': 2, // 强制 getter 函数中出现 return 语句\n            'no-await-in-loop': 2, // 禁止在循环中出现 await\n            'no-compare-neg-zero': 2, // 禁止与 -0 进行比较\n            'no-cond-assign': 2, // 禁止条件表达式中出现赋值操作符\n            'no-control-regex': 2, // 禁止在正则表达式中使用控制字符\n            'no-dupe-args': 2, // 禁止 function 定义中出现重名参数\n            'no-duplicate-case': 2, // 禁止出现重复的 case 标签\n            'no-empty': 2, // 禁止出现空语句块      \n            'no-ex-assign': 2, // 禁止对 catch 子句的参数重新赋值\n            'no-extra-boolean-cast': 2, // 禁止不必要的布尔转换\n            'no-extra-semi': 0, // 禁止不必要的分号\n            'no-inner-declarations': 2, // 禁止在嵌套的块中出现变量声明或 function 声明\n            'no-invalid-regexp': 2, // 禁止 RegExp 构造函数中存在无效的正则表达式字符串\n            'no-irregular-whitespace': 2, // 禁止在字符串和注释之外不规则的空白\n            'no-obj-calls': 2, // 禁止把全局对象作为函数调用\n            'no-regex-spaces': 2, // 禁止正则表达式字面量中出现多个空格\n            'no-template-curly-in-string': 2, // 禁止在常规字符串中出现模板字面量占位符语法      \n            'no-unreachable': 2, // 禁止在return、throw、continue 和 break 语句之后出现不可达代码\n            'no-unsafe-negation': 2, // 禁止对关系运算符的左操作数使用否定操作符\n            'use-isnan': 2, // 要求使用 isNaN() 检查 NaN\n            'valid-typeof': 2, // 强制 typeof 表达式与有效的字符串进行比较\n            'dot-location': 2, // 强制在点号之前和之后一致的换行\n            'no-caller': 2, // 禁用 arguments.caller 或 arguments.callee\n            'no-empty-pattern': 2, // 禁止使用空解构模式\n            'no-lone-blocks': 2, // 禁用不必要的嵌套块\n            'no-redeclare': 2, // 禁止多次声明同一变量\n            'no-return-await': 2, // 禁用不必要的 return await\n            'no-throw-literal': 2, // 禁止抛出异常字面量\n            'no-unmodified-loop-condition': 2, // 禁用一成不变的循环条件\n            'no-useless-escape': 2, // 禁用不必要的转义字符\n            'no-useless-return': 2, // 禁止多余的 return 语句\n            'require-await': 2, // 禁止使用不带 await 表达式的 async 函数\n            'no-dupe-class-members': 2, // 禁止类成员中出现重复的名称 \n            'no-duplicate-imports': 2, // 禁止重复导入\n            'no-new-symbol': 2, // 禁止 Symbolnew 操作符和 new 一起使用 \n            'no-this-before-super': 2, // 在构造函数中禁止在调用super()之前使用this或super\n          }\n          "))},r);function r(){return null!==a&&a.apply(this,arguments)||this}n.default=s}}]);