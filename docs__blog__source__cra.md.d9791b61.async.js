(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[42],{fK7P:function(n,e,t){"use strict";t.r(e);var a=t("xwgP"),o=t.n(a),r=t("nFtg"),s=t("INx8"),i=o.a.memo((n=>{n.demos;return o.a.createElement(o.a.Fragment,null,o.a.createElement("div",{className:"markdown"},o.a.createElement("h1",{id:"create-react-app-\u6e90\u7801\u89e3\u8bfb"},o.a.createElement(r["AnchorLink"],{to:"#create-react-app-\u6e90\u7801\u89e3\u8bfb","aria-hidden":"true",tabIndex:-1},o.a.createElement("span",{className:"icon icon-link"})),"create-react-app \u6e90\u7801\u89e3\u8bfb"),o.a.createElement("p",null,"\u5267\u900f\u4e0b\u6211\u4eec\u7684cli  ",o.a.createElement(r["Link"],{to:"https://github.com/FreemenL/create-emptyd-app"},"create-emptyd-app"),"  \u559c\u6b22\u7684\u8bdd\u53ef\u4ee5\u70b9\u4e2astar    ",o.a.createElement("code",null,"^_^")),o.a.createElement("blockquote",null,o.a.createElement("p",null,"create-react-app \u76ee\u5f55\u7ed3\u6784")),o.a.createElement(s["a"],{code:"\u251c\u2500\u2500  createReactApp.js    \n\u251c\u2500\u2500  index.js\n\u251c\u2500\u2500  LICENSE\n\u251c\u2500\u2500  package.json\n\u251c\u2500\u2500  README.md\n\u251c\u2500\u2500  CHANGELOG.zh-CN.md\n\u251c\u2500\u2500  yarn.lock.cached",lang:"md"}),o.a.createElement("p",null,"\u8fd9\u4e2a\u90e8\u5206\u7684\u6838\u5fc3\u662f createReactApp.js  \uff0c\u6574\u4e2a\u811a\u672c\u7684\u6d41\u7a0b\u5982\u4e0b",o.a.createElement("img",{src:"https://img-blog.csdnimg.cn/20190312234610763.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NjUzNDQ5,size_16,color_FFFFFF,t_70",alt:"\u6267\u884c createApp \u51fd\u6570\u4f20\u5165\u547d\u4ee4\u884c\u5f97\u5230\u7684\u53c2\u6570 \u5f00\u59cb\u6784\u5efa\uff08\u8fd9\u4e2a\u51fd\u6570\u57fa\u672c\u5728\u505a\u73af\u5883\u517c\u5bb9\uff09 \u6267\u884c run \u51fd\u6570\u751f\u6210\u9879\u76ee\u57fa\u7840\u9aa8\u67b6"})),o.a.createElement("h2",{id:"\u7ec6\u8282\u5982\u4e0b"},o.a.createElement(r["AnchorLink"],{to:"#\u7ec6\u8282\u5982\u4e0b","aria-hidden":"true",tabIndex:-1},o.a.createElement("span",{className:"icon icon-link"})),o.a.createElement("code",null,"\u7ec6\u8282\u5982\u4e0b")),o.a.createElement(s["a"],{code:"1. \u901a\u8fc7 commander \u8bfb\u53d6 \u547d\u4ee4\u884c\u53c2\u6570\n2. \u6267\u884c createApp \u51fd\u6570\u4f20\u5165\u547d\u4ee4\u884c\u5f97\u5230\u7684\u53c2\u6570 \u5f00\u59cb\u6784\u5efa\uff08\u8fd9\u4e2a\u51fd\u6570\u57fa\u672c\u5728\u505a\u73af\u5883\u517c\u5bb9\uff09 \n   \t->\u5199\u5165\u521d\u59cb\u7684 package.json \u6587\u4ef6 \n   \t->\u5982\u679c\u4e0d\u4f7f\u7528yarn\u7684\u65b9\u5f0f \u5e76\u4e14\u547d\u4ee4\u884c\u4e2dcwd \u548c\u5f53\u524d\u8fdb\u7a0b\u4e2d\u7684cwd \u4e0d\u4e00\u81f4\u7684\u8bdd \u7ed3\u675f\u5f53\u524d\u8fdb\u7a0b\n   \t->node \u4f4e\u4e8e6.0\u7684\u8bdd\u4f7f\u7528react-scripts@0.9.x\n   \t->\u5982\u679c\u4e0d\u7528yarn  npm\u7684\u7248\u672c\u8981\u5927\u4e8e3.0 \u5426\u5219 \u4f7f\u7528react-scripts@0.9.x\n   \t->\u5982\u679c\u4f7f\u7528 yarn \u5c31\u628alock \u6587\u4ef6\u6dfb\u52a0\u5230 \u5e94\u7528\u76ee\u5f55\u4e2d\n3. \u6267\u884c run \u51fd\u6570\u751f\u6210\u9879\u76ee\u57fa\u7840\u9aa8\u67b6 \n\t-> \u83b7\u53d6 react-scripts \u7684\u7248\u672c\n\t-> \u914d\u7f6e\u6240\u6709\u521d\u59cb\u4f9d\u8d56\n\t-> \u5224\u65ad\u662f\u5426\u4f7f\u7528 typescript\n\t-> \u4ece\u538b\u7f29\u6587\u4ef6\u6216\u8005\u8def\u5f84\u4e2d\u89e3\u6790 \u63d0\u53d6PackageName\n\t-> \u68c0\u6d4byarn \u7684\u6e90\u662f\u5426\u5b58\u5728\u95ee\u9898\n\t-> \u4e0b\u8f7d\u57fa\u672c\u7684\u4f9d\u8d56\n\t-> \u68c0\u6d4b node \u7684\u7248\u672c\u662f\u5426\u7b26\u5408react-scripts \u7684\u8981\u6c42\n\t-> \u62c9\u53d6\u9879\u76ee\u6a21\u7248\u6587\u4ef6",lang:"js"}),o.a.createElement("h3",{id:"\u4ee3\u7801\u6ce8\u91ca"},o.a.createElement(r["AnchorLink"],{to:"#\u4ee3\u7801\u6ce8\u91ca","aria-hidden":"true",tabIndex:-1},o.a.createElement("span",{className:"icon icon-link"})),o.a.createElement("code",null,"\u4ee3\u7801\u6ce8\u91ca")),o.a.createElement(s["a"],{code:"'use strict';\n// \u9a8c\u8bc1\u5305\u540d \nconst validateProjectName = require('validate-npm-package-name');\nconst chalk = require('chalk');\nconst commander = require('commander');\nconst fs = require('fs-extra');\nconst path = require('path');\nconst execSync = require('child_process').execSync;\n// \u8de8\u5e73\u53f0\u5f00\u542f\u5b50\u8fdb\u7a0b\nconst spawn = require('cross-spawn');\nconst semver = require('semver');\nconst dns = require('dns');\n// \u4e34\u65f6\u6587\u4ef6\u7cfb\u7edf \nconst tmp = require('tmp');\n// \u538b\u7f29\u89e3\u538b\nconst unpack = require('tar-pack').unpack;\nconst url = require('url');\n// \u53d1\u9001http\u8bf7\u6c42\nconst hyperquest = require('hyperquest');\n// \u8f93\u51fa\u73af\u5883\u53d8\u91cf\nconst envinfo = require('envinfo');\nconst os = require('os');\n\nconst packageJson = require('./package.json');\n\n// These files should be allowed to remain on a failed install,\n// but then silently removed during the next create.\nconst errorLogFilePatterns = [\n    'npm-debug.log',\n    'yarn-error.log',\n    'yarn-debug.log',\n];\n\nlet projectName;\n \nconst program = new commander.Command(packageJson.name)\n  .version(packageJson.version) // \u8bbe\u7f6e\u7248\u672c\u53f7\n  .arguments('<project-directory>') //\u83b7\u53d6\u8f93\u5165\u53c2\u6570\n  .usage(`${chalk.green('<project-directory>')} [options]`)  // --help \u65f6\u5019\u8f93\u51fa\u7684\u7528\u4f8b\u63d0\u793a\n  .action(name => {  //\u6b64\u5904\u7684name \u5c31\u5bf9\u5e94.arguments('<project-directory>') \u4e2d\u7684\u53c2\u6570\n    projectName = name;\n  })\n  .option('--verbose', 'print additional logs')  //\u6253\u5370\u989d\u5916\u7684\u65e5\u5fd7\n  .option('--info', 'print environment debug info') //\u6253\u5370\u7cfb\u7edf\u4fe1\u606f\n  .option(\n    '--scripts-version <alternative-package>',\n    'use a non-standard version of react-scripts'\n  ) //\u4f7f\u7528\u975e\u6807\u51c6\u7248\u672c\u7684 react-scripts \n  .option('--use-npm') //\u4f7f\u7528npm \n  .option('--use-pnp') \n  .option('--typescript')\n  .allowUnknownOption()\n  .on('--help', () => {\n    console.log(`Only ${chalk.green('<project-directory>')} is required.`);\n    console.log();\n    console.log(\n      `    A custom ${chalk.cyan('--scripts-version')} can be one of:`\n    );\n    console.log(`- a specific npm version: ${chalk.green('0.8.2')}`);\n    console.log(`- a specific npm tag: ${chalk.green('@next')}`);\n    console.log(\n      ` - a custom fork published on npm: ${chalk.green(\n        'my-react-scripts'\n      )}`\n    );\n    console.log(\n      `- a local path relative to the current working directory: ${chalk.green(\n        'file:../my-react-scripts'\n      )}`\n    );\n    console.log(\n      `- a .tgz archive: ${chalk.green(\n        'https://mysite.com/my-react-scripts-0.8.2.tgz'\n      )}`\n    );\n    console.log(\n      `      - a .tar.gz archive: ${chalk.green(\n        'https://mysite.com/my-react-scripts-0.8.2.tar.gz'\n      )}`\n    );\n    console.log(\n      `    It is not needed unless you specifically want to use a fork.`\n    );\n    console.log();\n    console.log(\n      `    If you have any problems, do not hesitate to file an issue:`\n    );\n    console.log(\n      `      ${chalk.cyan(\n        'https://github.com/facebook/create-react-app/issues/new'\n      )}`\n    );\n    console.log();\n  })\n  .parse(process.argv);\n\n  // create-emptyd-app --info \u8f93\u51fa \u64cd\u4f5c\u7cfb\u7edf\u7b49\u73af\u5883\u4fe1\u606f\n  if(program.info){\n    console.log(chalk.bold('\\nEnvironment Info:'));\n    return envinfo\n      .run(\n        {\n          System: ['OS', 'CPU'],\n          Binaries: ['Node', 'npm', 'Yarn'],\n          Browsers: ['Chrome', 'Edge', 'Internet Explorer', 'Firefox', 'Safari'],\n          npmPackages: ['react', 'react-dom', 'react-scripts'],\n          npmGlobalPackages: ['create-react-app'],\n        },\n        {\n          clipboard: false,\n          duplicates: true,\n          showNotFound: true,\n        }\n      )\n      .then(function(params){\n        console.log(chalk.blue(params));\n      });\n  }\n\n  if (typeof projectName === 'undefined') {\n    console.error('Please specify the project directory:');\n    console.log(\n      `  ${chalk.cyan(program.name())} ${chalk.green('<project-directory>')}`\n    );\n    console.log();\n    console.log('For example:');\n    console.log(`  ${chalk.cyan(program.name())} ${chalk.green('my-app')}`);\n    console.log();\n    console.log(\n      `Run ${chalk.cyan(`${program.name()} --help`)} to see all options.`\n    );\n    process.exit(1);\n  }\n\n  // \u4f7f\u7528\u5185\u90e8\u6d4b\u8bd5\u7248\u672c\n  const hiddenProgram = new commander.Command()\n  .option(\n    '--internal-testing-template <path-to-template>',\n    '(internal usage only, DO NOT RELY ON THIS) ' +\n      'use a non-standard application template'\n  )\n  .parse(process.argv);\n\ncreateApp(\n    projectName, \n    program.verbose,\n    program.scriptsVersion,\n    program.useNpm,\n    program.usePnp,\n    program.typescript,\n    hiddenProgram.internalTestingTemplate\n);\n// \u8f93\u51fa\u9a8c\u8bc1\u5305\u540d\u7684\u9519\u8bef\u63d0\u793a \nfunction printValidationResults(results) {\n    if (typeof results !== 'undefined') {\n      results.forEach(error => {\n        console.error(chalk.red(`  *  ${error}`));\n      });\n    }\n}\n// \u547d\u540d\u89c4\u8303\nfunction checkAppName(appName) {\n    //\u9a8c\u8bc1\u5305\u7684\u547d\u540d\u89c4\u5219\u662f\u5426\u5408\u7406\n    const validationResult = validateProjectName(appName);\n    if (!validationResult.validForNewPackages) {\n      console.error(\n        `Could not create a project called ${chalk.red(\n          `\"${appName}\"`\n        )} because of npm naming restrictions:`\n      );\n      printValidationResults(validationResult.errors);\n      printValidationResults(validationResult.warnings);\n      process.exit(1); //\u5931\u8d25\u65b9\u5f0f\u7ed3\u675f\u8fdb\u7a0b\n    }\n  \n    //  \u9879\u76ee\u540d\u79f0\u4e0d\u80fd\u5305\u542b\u4e00\u4e0b\u5173\u952e\u5b57\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\n    const dependencies = ['react', 'react-dom', 'react-scripts','emptyd'].sort();\n    if (dependencies.indexOf(appName) >= 0) {\n      console.error(\n        chalk.red(\n          `We cannot create a project called ${chalk.green(\n            appName\n          )} because a dependency with the same name exists.\\n` +\n            `Due to the way npm works, the following names are not allowed:\\n\\n`\n        ) +\n          chalk.cyan(dependencies.map(depName => `  ${depName}`).join('\\n')) +\n          chalk.red('\\n\\nPlease choose a different project name.')\n      );\n      process.exit(1); //\u5931\u8d25\u65b9\u5f0f\u7ed3\u675f\u8fdb\u7a0b\n    }\n}  \n\n// \u68c0\u6d4b\u9879\u76ee\u76ee\u5f55\u4e2d\u7684\u6742\u8d28 \u548c \u5220\u9664\u9057\u7559\u6587\u4ef6\nfunction isSafeToCreateProjectIn(root, name) {\n    const validFiles = [\n      '.DS_Store',\n      'Thumbs.db',\n      '.git',\n      '.gitignore',\n      '.idea',\n      'README.md',\n      'LICENSE',\n      '.hg',\n      '.hgignore',\n      '.hgcheck',\n      '.npmignore',\n      'mkdocs.yml',\n      'docs',\n      '.travis.yml',\n      '.gitlab-ci.yml',\n      '.gitattributes',\n    ];\n    console.log();\n  \n    const conflicts = fs\n      .readdirSync(root) // \u83b7\u53d6\u5f53\u524d\u6587\u4ef6\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u5217\u8868\n      .filter(file => !validFiles.includes(file))   // \u6392\u9664 validFiles \u4e2d\u7684\u5143\u7d20\n      // IntelliJ IDEA creates module files before CRA is launched\n      .filter(file => !/\\.iml$/.test(file))  // \u6392\u9664\u4ee5.iml \u7ed3\u5c3e\u7684\u6587\u4ef6\n      // Don't treat log files from previous installation as conflicts\n      .filter( // \u6392\u9664 errorLogFilePatterns \u4e2d\u7684\u6587\u4ef6\n        file => !errorLogFilePatterns.some(pattern => file.indexOf(pattern) === 0)\n      );\n    // \u4fdd\u8bc1\u9879\u76ee\u76ee\u5f55\u91cc\u9762\u9664\u4e86 validFiles \u4e2d\u7684\u5143\u7d20\uff0c\u4ee5.iml \u7ed3\u5c3e\u7684\u6587\u4ef6\uff0cerrorLogFilePatterns \u4e2d\u7684\u6587\u4ef6 \u4ee5\u5916\u4e0d\u5305\u542b\u4efb\u4f55\u6742\u8d28\n    if (conflicts.length > 0) {\n      console.log(\n        `The directory ${chalk.green(name)} contains files that could conflict:`\n      );\n      console.log();\n      for (const file of conflicts) {\n        console.log(`  ${chalk.red(file)}`);\n      }\n      console.log();\n      console.log(\n        'Either try using a new directory name, or remove the files listed above.'\n      );\n      return false;\n    }\n  \n    // \u5220\u9664\u9879\u76ee\u76ee\u5f55\u4e2d\u7684\u9519\u8bef\u65e5\u5fd7\u53ca\u8c03\u8bd5\u65e5\u5fd7\u6587\u4ef6 errorLogFilePatterns    \n    const currentFiles = fs.readdirSync(path.join(root));\n    currentFiles.forEach(file => {\n      errorLogFilePatterns.forEach(errorLogFilePattern => {\n        if (file.indexOf(errorLogFilePattern) === 0) {\n          fs.removeSync(path.join(root, file));\n        }\n      });\n    });\n  \n    return true;\n}\n// \u68c0\u6d4b\u6709\u65e0\u5b89\u88c5yarn \nfunction shouldUseYarn() {\n    try {\n      execSync('yarnpkg --version', { stdio: 'ignore' });\n      return true;\n    } catch (e) {\n      return false;\n    }\n}\n//  \u5224\u65ad\u547d\u4ee4\u884c\u4e2dcwd  \u548c\u5f53\u524d\u8fdb\u7a0b\u4e2d\u7684cwd \u662f\u5426\u4e00\u81f4\nfunction checkThatNpmCanReadCwd() {\n    const cwd = process.cwd();\n    let childOutput = null;\n    try {\n      // Note: intentionally using spawn over exec since\n      // the problem doesn't reproduce otherwise.\n      // `npm config list` is the only reliable way I could find\n      // to reproduce the wrong path. Just printing process.cwd()\n      // in a Node process was not enough.\n      // \u68c0\u6d4b\u73af\u5883\u4e2d\u6709\u65e0\u5b89\u88c5npm \n      childOutput = spawn.sync('npm', ['config', 'list']).output.join('');\n    } catch (err) {\n      // Something went wrong spawning node.\n      // Not great, but it means we can't do this check.\n      // We might fail later on, but let's continue.\n      return true;\n    }\n    // \u68c0\u6d4b\u73af\u5883\u4e2d\u6709\u65e0\u5b89\u88c5npm \n    if (typeof childOutput !== 'string') {\n      return true;\n    }\n    const lines = childOutput.split('\\n');\n    // `npm config list` output includes the following line:\n    // \"; cwd = C:\\path\\to\\current\\dir\" (unquoted)\n    // I couldn't find an easier way to get it.\n    const prefix = '; cwd = ';\n    const line = lines.find(line => line.indexOf(prefix) === 0);\n\n    if (typeof line !== 'string') {\n      // Fail gracefully. They could remove it.\n      return true;\n    }\n    const npmCWD = line.substring(prefix.length);\n\n    if (npmCWD === cwd) {\n      return true;\n    }\n    console.error(\n      chalk.red(\n        `Could not start an npm process in the right directory.\\n\\n` +\n          `The current directory is: ${chalk.bold(cwd)}\\n` +\n          `However, a newly started npm process runs in: ${chalk.bold(\n            npmCWD\n          )}\\n\\n` +\n          `This is probably caused by a misconfigured system terminal shell.`\n      )\n    );\n    console.log(process.platform);\n    if (process.platform === 'win32') {\n      console.error(\n        chalk.red(`On Windows, this can usually be fixed by running:\\n\\n`) +\n          `  ${chalk.cyan(\n            'reg'\n          )} delete \"HKCU\\\\Software\\\\Microsoft\\\\Command Processor\" /v AutoRun /f\\n` +\n          `  ${chalk.cyan(\n            'reg'\n          )} delete \"HKLM\\\\Software\\\\Microsoft\\\\Command Processor\" /v AutoRun /f\\n\\n` +\n          chalk.red(`Try to run the above two lines in the terminal.\\n`) +\n          chalk.red(\n            `To learn more about this problem, read: https://blogs.msdn.microsoft.com/oldnewthing/20071121-00/?p=24433/`\n          )\n      );\n    }\n    return false;\n}\n// \u68c0\u6d4bnpm \u7684\u7248\u672c\u662f\u5426\u5927\u4e8e3.0.0\nfunction checkNpmVersion() {\n    let hasMinNpm = false;\n    let npmVersion = null;\n    try {\n      npmVersion = execSync('npm --version')\n        .toString()\n        .trim();\n      hasMinNpm = semver.gte(npmVersion, '3.0.0');\n    } catch (err) {\n      // ignore\n    }\n    return {\n      hasMinNpm: hasMinNpm,\n      npmVersion: npmVersion,\n    };\n}\n// \u68c0\u6d4byarn \u7684\u7248\u672c\u662f\u5426\u5927\u4e8e3.0.0\nfunction checkYarnVersion() {\n    let hasMinYarnPnp = false;\n    let yarnVersion = null;\n    try {\n      yarnVersion = execSync('yarnpkg --version')\n        .toString()\n        .trim();\n      let trimmedYarnVersion = /^(.+?)[-+].+$/.exec(yarnVersion);\n      if (trimmedYarnVersion) {\n        trimmedYarnVersion = trimmedYarnVersion.pop();\n      }\n      hasMinYarnPnp = semver.gte(trimmedYarnVersion || yarnVersion, '1.12.0');\n    } catch (err) {\n      // ignore\n    }\n    return {\n      hasMinYarnPnp: hasMinYarnPnp,\n      yarnVersion: yarnVersion,\n    };\n}\n// \u83b7\u53d6 react-scripts \u7684\u7248\u672c\nfunction getInstallPackage(version, originalDirectory) {\n  let packageToInstall = 'react-scripts';\n  const validSemver = semver.valid(version);\n  if (validSemver) {\n    packageToInstall += `@${validSemver}`;\n  } else if (version) {\n    if (version[0] === '@' && version.indexOf('/') === -1) {\n      packageToInstall += version;\n    } else if (version.match(/^file:/)) {\n      packageToInstall = `file:${path.resolve(\n        originalDirectory,\n        version.match(/^file:(.*)?$/)[1]\n      )}`;\n    } else {\n      // for tar.gz or alternative paths\n      packageToInstall = version;\n    }\n  }\n  return packageToInstall;\n}\n\n// \u521b\u5efa\u4e34\u65f6\u7684\u7a7a\u76ee\u5f55\u7528\u4e8e\u89e3\u538b\u6587\u4ef6\nfunction getTemporaryDirectory() {\n  return new Promise((resolve, reject) => {\n    // Unsafe cleanup lets us recursively delete the directory if it contains\n    // contents; by default it only allows removal if it's empty\n    tmp.dir({ unsafeCleanup: true }, (err, tmpdir, callback) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve({\n          tmpdir: tmpdir,\n          cleanup: () => {\n            try {\n              callback();\n            } catch (ignored) {\n              // Callback might throw and fail, since it's a temp directory the\n              // OS will clean it up eventually...\n            }\n          },\n        });\n      }\n    });\n  });\n}\n// \u6d41\u7684\u65b9\u5f0f\u89e3\u538b\u6587\u4ef6\nfunction extractStream(stream, dest) {\n  return new Promise((resolve, reject) => {\n    stream.pipe(\n      unpack(dest, err => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(dest);\n        }\n      })\n    );\n  });\n}\n\n// \u4ece\u538b\u7f29\u6587\u4ef6\u6216\u8005\u8def\u5f84\u4e2d\u89e3\u6790 \u63d0\u53d6PackageName\nfunction getPackageName(installPackage) {\n  // \u5982\u679c react-scripts \u662f\u538b\u7f29\u6587\u4ef6 \u5c31\u8bf7\u6c42\u56de\u6765\u89e3\u538b \u7136\u540e\u62ff\u5230\u6587\u4ef6\u7684 packageName\n  if (installPackage.match(/^.+\\.(tgz|tar\\.gz)$/)) {\n    return getTemporaryDirectory()\n      .then(obj => {\n        let stream;\n        if (/^http/.test(installPackage)) {\n          stream = hyperquest(installPackage);\n        } else {\n          stream = fs.createReadStream(installPackage);\n        }\n        return extractStream(stream, obj.tmpdir).then(() => obj);\n      })\n      .then(obj => {\n        const packageName = require(path.join(obj.tmpdir, 'package.json')).name;\n        obj.cleanup();\n        return packageName;\n      })\n      .catch(err => {\n        // The package name could be with or without semver version, e.g. react-scripts-0.2.0-alpha.1.tgz\n        // However, this function returns package name only without semver version.\n        console.log(\n          `Could not extract the package name from the archive: ${err.message}`\n        );\n        const assumedProjectName = installPackage.match(\n          /^.+\\/(.+?)(?:-\\d+.+)?\\.(tgz|tar\\.gz)$/\n        )[1];\n        console.log(\n          `Based on the filename, assuming it is \"${chalk.cyan(\n            assumedProjectName\n          )}\"`\n        );\n        return Promise.resolve(assumedProjectName);\n      });\n   } else if (installPackage.indexOf('git+') === 0) {\n    // \u5982\u679c\u4f9d\u8d56\u7684\u540d\u79f0\u662fgit\u5730\u5740 \u5c31\u5339\u914d .git \u524d\u7684\u540d\u79f0\n    return Promise.resolve(installPackage.match(/([^/]+)\\.git(#.*)?$/)[1]);\n  } else if (installPackage.match(/.+@/)) {\n    // Do not match @scope/ when stripping off @version or @tag\n    return Promise.resolve(\n      installPackage.charAt(0) + installPackage.substr(1).split('@')[0]\n    );\n  } else if (installPackage.match(/^file:/)) {\n    const installPackagePath = installPackage.match(/^file:(.*)?$/)[1];\n    const installPackageJson = require(path.join(\n      installPackagePath,\n      'package.json'\n    ));\n    return Promise.resolve(installPackageJson.name);\n  }\n  return Promise.resolve(installPackage);\n}\n\nfunction getProxy() {\n  if (process.env.https_proxy) {\n    return process.env.https_proxy;\n  } else {\n    try {\n      // Trying to read https-proxy from .npmrc\n      let httpsProxy = execSync('npm config get https-proxy')\n        .toString()\n        .trim();\n      return httpsProxy !== 'null' ? httpsProxy : undefined;\n    } catch (e) {\n      return;\n    }\n  }\n}\n\nfunction checkIfOnline(useYarn) {\n  if (!useYarn) {\n    // Don't ping the Yarn registry.\n    // We'll just assume the best case.\n    return Promise.resolve(true);\n  }\n\n  return new Promise(resolve => {\n    dns.lookup('registry.yarnpkg.com', err => {\n      let proxy;\n      if (err != null && (proxy = getProxy())) {\n        // If a proxy is defined, we likely can't resolve external hostnames.\n        // Try to resolve the proxy name as an indication of a connection.\n        dns.lookup(url.parse(proxy).hostname, proxyErr => {\n          resolve(proxyErr == null);\n        });\n      } else {\n        resolve(err == null);\n      }\n    });\n  });\n}\n\n\n// \u68c0\u6d4b node \u7684\u7248\u672c\u662f\u5426\u7b26\u5408react-script\u7684\u9700\u6c42 \nfunction checkNodeVersion(packageName) {\n  const packageJsonPath = path.resolve(\n    process.cwd(),\n    'node_modules',\n    packageName,\n    'package.json'\n  );\n  // \u5982\u679c\u4e0d\u5b58\u5728 /node_modules/react-scripts/package.json\n  if (!fs.existsSync(packageJsonPath)) {\n    return;\n  }\n\n  const packageJson = require(packageJsonPath);\n  if (!packageJson.engines || !packageJson.engines.node) {\n    return;\n  }\n\n  if (!semver.satisfies(process.version, packageJson.engines.node)) {\n    console.error(\n      chalk.red(\n        'You are running Node %s.\\n' +\n          'Create emptyd App requires Node %s or higher. \\n' +\n          'Please update your version of Node.'\n      ),\n      process.version,\n      packageJson.engines.node\n    );\n    process.exit(1);\n  }\n}\n// \u4e0b\u8f7d\u57fa\u7840\u4f9d\u8d56\nfunction install(root, useYarn, usePnp, dependencies, verbose, isOnline) {\n  return new Promise((resolve, reject) => {\n    let command;\n    let args;\n    if (useYarn) {\n      command = 'yarnpkg';\n      args = ['add', '--exact']; // \u7cbe\u786e\u4e0b\u8f7d\u4f9d\u8d56\n      if (!isOnline) {\n        // \u4ece\u79bb\u7ebf\u955c\u50cf\u4e2d\u83b7\u53d6\u4f9d\u8d56\n        args.push('--offline');\n      }\n      if (usePnp) {\n        args.push('--enable-pnp');\n      }\n      // args [ 'add', '--exact', 'react', 'react-dom', 'react-scripts' ]\n      [].push.apply(args, dependencies);\n      \n      // Explicitly set cwd() to work around issues like\n      // https://github.com/facebook/create-react-app/issues/3326.\n      // Unfortunately we can only do this for Yarn because npm support for\n      // equivalent --prefix flag doesn't help with this issue.\n      // This is why for npm, we run checkThatNpmCanReadCwd() early instead.\n      args.push('--cwd');\n      args.push(root);\n      //  [ 'add',\n      //  '--exact',\n      //  'react',\n      //  'react-dom',\n      //  'react-scripts',\n      //  '--cwd',\n      //  '/Users/jiayali/Desktop/emptyd/create-emptyd-app/test/insert' ]\n      if (!isOnline) {\n        console.log(chalk.yellow('You appear to be offline.'));\n        console.log(chalk.yellow('Falling back to the local Yarn cache.'));\n        console.log();\n      }\n    } else {\n      command = 'npm';\n      args = [\n        'install',\n        '--save',\n        '--save-exact',\n        '--loglevel',\n        'error',\n      ].concat(dependencies);\n\n      if (usePnp) {\n        console.log(chalk.yellow(\"NPM doesn't support PnP.\"));\n        console.log(chalk.yellow('Falling back to the regular installs.'));\n        console.log();\n      }\n    }\n    if (verbose) {\n      args.push('--verbose');\n    }\n\n    const child = spawn(command, args, { stdio: 'inherit' });\n    child.on('close', code => {\n      if (code !== 0) {\n        reject({\n          command: `${command} ${args.join(' ')}`,\n        });\n        return;\n      }\n      resolve();\n    });\n  });\n}\n\n// \u7248\u672c\u7ea0\u6b63\nfunction setCaretRangeForRuntimeDeps(packageName) {\n  const packagePath = path.join(process.cwd(), 'package.json');\n  const packageJson = require(packagePath);\n\n  if (typeof packageJson.dependencies === 'undefined') {\n    console.error(chalk.red('Missing dependencies in package.json'));\n    process.exit(1);\n  }\n\n  const packageVersion = packageJson.dependencies[packageName];\n  if (typeof packageVersion === 'undefined') {\n    console.error(chalk.red(`Unable to find ${packageName} in package.json`));\n    process.exit(1);\n  }\n\n  makeCaretRange(packageJson.dependencies, 'react');\n  makeCaretRange(packageJson.dependencies, 'react-dom');\n  \n  fs.writeFileSync(packagePath, JSON.stringify(packageJson, null, 2) + os.EOL);\n}\n// \u68c0\u6d4b\u57fa\u7840\u4f9d\u8d56\u7684\u7248\u672c\u53f7\nfunction makeCaretRange(dependencies, name) {\n  const version = dependencies[name];\n\n  if (typeof version === 'undefined') {\n    console.error(chalk.red(`Missing ${name} dependency in package.json`));\n    process.exit(1);\n  }\n\n  let patchedVersion = `${version}`;\n  if (!semver.validRange(patchedVersion)) {\n    console.error(\n      `Unable to patch ${name} dependency version because version ${chalk.red(\n        version\n      )} will become invalid ${chalk.red(patchedVersion)}`\n    );\n    patchedVersion = version;\n  }\n  dependencies[name] = patchedVersion;\n}\n\nfunction executeNodeScript({ cwd, args }, data, source) {\n  return new Promise((resolve, reject) => {\n    //\u6b64\u5904\u7684\u610f\u601d\u5c31\u662f \u5f00\u542f\u4e00\u4e2a\u5b50\u8fdb\u7a0b \u6267\u884c \u4f20\u8fdb\u6765\u7684 source \u4ee3\u7801 \u4e5f\u5c31\u662f react-scripts/scripts/init.js\n    //\u628a data \u5e8f\u5217\u5316\u540e\u4f5c\u4e3a\u53c2\u6570 \u4f20\u7ed9react-scripts/scripts/init.js \u4e2d\u5bfc\u51fa\u7684\u51fd\u6570\n    const child = spawn(\n      process.execPath,\n      [...args, '-e', source, '--', JSON.stringify(data)],\n      { cwd, stdio: 'inherit' }\n    );\n\n    child.on('close', code => {\n      if (code !== 0) {\n        reject({\n          command: `node ${args.join(' ')}`,\n        });\n        return;\n      }\n      resolve();\n    });\n  });\n}\n// \u6267\u884c\nfunction createApp(\n    name,            // \u9879\u76ee\u540d\u79f0\n    verbose,         // \u6253\u5370\u989d\u5916\u7684\u65e5\u5fd7\u4fe1\u606f\n    version,         // \u4f7f\u7528\u975e\u6807\u51c6\u7248\u672c\u7684 react-scripts  \n    useNpm,          // \u4f7f\u7528npm\n    usePnp,          // \u4f7f\u7528pnp\n    useTypescript,   // \u4f7f\u7528typescript \n    template         // \u4f7f\u7528\u5185\u6d4b\u7248\u672c\u7684\u6a21\u7248\u6587\u4ef6\n  ) {\n    const root = path.resolve(name);  // \u83b7\u53d6\u9879\u76ee\u7684\u7edd\u5bf9\u8def\u5f84\n    const appName = path.basename(root);   // \u83b7\u53d6\u9879\u76ee\u540d\u79f0\n    \n    checkAppName(appName);  // \u9a8c\u8bc1\u9879\u76ee\u540d\u79f0\n    fs.ensureDirSync(name);  // \u786e\u4fdd\u9879\u76ee\u76ee\u5f55\u5b58\u5728\u3002\u5982\u679c\u76ee\u5f55\u7ed3\u6784\u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\u5b83\n    // \u5982\u679c\u9879\u76ee\u6587\u4ef6\u4e2d\u6709\u6742\u8d28 \u5c31\u7ed3\u675f\u5f53\u524d\u8fdb\u7a0b\n    // if (!isSafeToCreateProjectIn(root, name)) {\n    //   process.exit(1);\n    // }\n    console.log(`Creating a new emptyd app in ${chalk.green(root)}.`);\n    console.log();\n  \n    const packageJson = {\n      name: appName,\n      version: '0.1.0',\n      private: true,\n    };\n    //\u5199\u5165 package.json \u6587\u4ef6  os.EOL:\u517c\u5bb9\u5404\u64cd\u4f5c\u7cfb\u7edf\u7684\u6362\u884c\u7b26 \n    fs.writeFileSync(\n        path.join(root, 'package.json'),\n        JSON.stringify(packageJson, null, 2) + os.EOL\n    );\n\n    // JSON.stringify({ x: [10, undefined, function(){}, Symbol('')] }); \n    // '{\"x\":[10,null,null,null]}' \n\n    // JSON.stringify(packageJson, function(key, value) {\n    //     if (typeof value === 'string') {\n    //       return undefined;\n    //     }\n    //     return value;\n    //   }, 2)\n\n    const useYarn = useNpm ? false : shouldUseYarn();\n    const originalDirectory = process.cwd();\n    process.chdir(root);\n    //  \u5982\u679c\u4e0d\u4f7f\u7528yarn\u7684\u65b9\u5f0f \u5e76\u4e14\u547d\u4ee4\u884c\u4e2dcwd \u548c\u5f53\u524d\u8fdb\u7a0b\u4e2d\u7684cwd \u4e0d\u4e00\u81f4\u7684\u8bdd \u7ed3\u675f\u5f53\u524d\u8fdb\u7a0b\n    if (!useYarn && !checkThatNpmCanReadCwd()) {\n      process.exit(1);\n    }\n    // node \u4f4e\u4e8e6.0\u7684\u8bdd\u4f7f\u7528react-scripts@0.9.x\n    if (!semver.satisfies(process.version, '>=6.0.0')) {\n      console.log(\n        chalk.yellow(\n          `You are using Node ${\n            process.version\n          } so the project will be bootstrapped with an old unsupported version of tools.\\n\\n` +\n            `Please update to Node 6 or higher for a better, fully supported experience.\\n`\n        )\n      );\n      // Fall back to latest supported react-scripts on Node 4\n      version = 'react-scripts@0.9.x';   //\n    }\n    // \u5982\u679c\u4e0d\u7528yarn  npm\u7684\u7248\u672c\u8981\u5927\u4e8e3.0 \u5426\u5219 \u4f7f\u7528react-scripts@0.9.x\n    if (!useYarn) {\n      const npmInfo = checkNpmVersion();\n      if (!npmInfo.hasMinNpm) {\n        if (npmInfo.npmVersion) {\n          console.log(\n            chalk.yellow(\n              `You are using npm ${\n                npmInfo.npmVersion\n              } so the project will be bootstrapped with an old unsupported version of tools.\\n\\n` +\n                `Please update to npm 3 or higher for a better, fully supported experience.\\n`\n            )\n          );\n        }\n        // Fall back to latest supported react-scripts for npm 3\n        version = 'react-scripts@0.9.x';\n      }\n    } else if (usePnp) {\n      const yarnInfo = checkYarnVersion();\n      if (!yarnInfo.hasMinYarnPnp) {\n        if (yarnInfo.yarnVersion) {\n          chalk.yellow(\n            `You are using Yarn ${\n              yarnInfo.yarnVersion\n            } together with the --use-pnp flag, but Plug'n'Play is only supported starting from the 1.12 release.\\n\\n` +\n              `Please update to Yarn 1.12 or higher for a better, fully supported experience.\\n`\n          );\n        }\n        // 1.11 had an issue with webpack-dev-middleware, so better not use PnP with it (never reached stable, but still)\n        usePnp = false;\n      }\n    }\n    // \u5982\u679c\u4f7f\u7528 yarn \u5c31\u628alock \u6587\u4ef6\u6dfb\u52a0\u5230 \u5e94\u7528\u76ee\u5f55\u4e2d\n    if (useYarn) {\n      let yarnUsesDefaultRegistry = true;\n      try {\n        yarnUsesDefaultRegistry =\n          execSync('yarnpkg config get registry')\n            .toString()\n            .trim() === 'https://registry.yarnpkg.com';\n      } catch (e) {\n        // ignore\n      }\n      if (yarnUsesDefaultRegistry) {\n        fs.copySync(\n          require.resolve('./yarn.lock.cached'),\n          path.join(root, 'yarn.lock')\n        );\n      }\n    }\n  \n    run(\n      root, \n      appName, \n      version,  \n      verbose,\n      originalDirectory,\n      template,\n      useYarn,\n      usePnp,\n      useTypescript\n    );\n  }\n  \n  function run(\n    root,       // \u9879\u76ee\u7684\u7edd\u5bf9\u8def\u5f84\n    appName,    // \u9879\u76ee\u540d\u79f0\n    version,  // \u4f7f\u7528\u975e\u6807\u51c6\u7248\u672c\u7684 react-scripts\n    verbose,  // \u6253\u5370\u989d\u5916\u7684\u65e5\u5fd7\u4fe1\u606f\n    originalDirectory,  //\u811a\u624b\u67b6\u547d\u4ee4\u884c\u6240\u5728\u5de5\u4f5c\u76ee\u5f55\n    template,  // \u4f7f\u7528\u5185\u6d4b\u7248\u672c\u7684\u6a21\u7248\u6587\u4ef6\n    useYarn,    //\u4f7f\u7528yarn \n    usePnp,      //\u4f7f\u7528pnp\n    useTypescript   //\u4f7f\u7528 typescript \n  ) {\n    // \u83b7\u53d6 react-scripts \u7684\u7248\u672c\n    const packageToInstall = getInstallPackage(version, originalDirectory);\n    // \u6240\u6709\u521d\u59cb\u4f9d\u8d56\n    const allDependencies = ['react', 'react-dom', packageToInstall];\n    // \u4f7f\u7528typescript\n    if (useTypescript) {\n      // TODO: get user's node version instead of installing latest\n      allDependencies.push(\n        '@types/node',\n        '@types/react',\n        '@types/react-dom',\n        '@types/jest',\n        'typescript'\n      );\n    }\n  \n    console.log(`${chalk.blue('Installing packages. This might take a couple of minutes...')}`);\n    //\u4ece\u538b\u7f29\u6587\u4ef6\u6216\u8005\u8def\u5f84\u4e2d\u89e3\u6790 \u63d0\u53d6PackageName\n    getPackageName(packageToInstall)\n      .then(packageName => // \u68c0\u6d4byarn \u7684\u6e90\u662f\u5426\u5b58\u5728\u95ee\u9898\n        checkIfOnline(useYarn).then(isOnline => ({\n          isOnline: isOnline,\n          packageName: packageName,\n        }))\n      )\n      .then(info => {\n        const isOnline = info.isOnline;\n        const packageName = info.packageName;\n        console.log(\n          `Installing ${chalk.cyan('react')}, ${chalk.cyan(\n            'react-dom'\n          )}, and ${chalk.cyan(packageName)}...`\n        );\n        console.log();\n        return install(\n          root,\n          useYarn,\n          usePnp,\n          allDependencies,\n          verbose,\n          isOnline\n        ).then(() => packageName); // \u4e0b\u8f7d\u57fa\u672c\u7684\u4f9d\u8d56\n      })\n      .then(async packageName => {\n        checkNodeVersion(packageName); // \u68c0\u6d4b node \u7684\u7248\u672c\u662f\u5426\u7b26\u5408react-scripts \u7684\u8981\u6c42\n        setCaretRangeForRuntimeDeps(packageName);\n  \n        const pnpPath = path.resolve(process.cwd(), '.pnp.js');\n        const nodeArgs = fs.existsSync(pnpPath) ? ['--require', pnpPath] : []; \n        // \u62c9\u53d6\u9879\u76ee\u6a21\u7248\u6587\u4ef6\n        await executeNodeScript(\n          {\n            cwd: process.cwd(),\n            args: nodeArgs,\n          },\n          [root, appName, verbose, originalDirectory, template],\n          `\n          var init = require('${packageName}/scripts/init.js');\n          init.apply(null, JSON.parse(process.argv[1]));\n        `\n        );\n  \n        if (version === 'react-scripts@0.9.x') {\n          console.log(\n            chalk.yellow(\n              `\\nNote: the project was bootstrapped with an old unsupported version of tools.\\n` +\n                `Please update to Node >=6 and npm >=3 to get supported tools in new projects.\\n`\n            )\n          );\n        }\n      })\n      .catch(reason => {\n        console.log();\n        console.log('Aborting installation.');\n        if (reason.command) {\n          console.log(`  ${chalk.cyan(reason.command)} has failed.`);\n        } else {\n          console.log(chalk.red('Unexpected error. Please report it as a bug:'));\n          console.log(reason);\n        }\n        console.log();\n  \n        // On 'exit' we will delete these files from target directory.\n        const knownGeneratedFiles = ['package.json', 'yarn.lock', 'node_modules'];\n        const currentFiles = fs.readdirSync(path.join(root));\n        currentFiles.forEach(file => {\n          knownGeneratedFiles.forEach(fileToMatch => {\n            // This removes all knownGeneratedFiles.\n            if (file === fileToMatch) {\n              console.log(`Deleting generated file... ${chalk.cyan(file)}`);\n              fs.removeSync(path.join(root, file));\n            }\n          });\n        });\n        const remainingFiles = fs.readdirSync(path.join(root));\n        if (!remainingFiles.length) {\n          // Delete target folder if empty\n          console.log(\n            `Deleting ${chalk.cyan(`${appName}/`)} from ${chalk.cyan(\n              path.resolve(root, '..')\n            )}`\n          );\n          process.chdir(path.resolve(root, '..'));\n          fs.removeSync(path.join(root));\n        }\n        console.log('Done.');\n        process.exit(1);\n      });\n  }",lang:"js"}),o.a.createElement("blockquote",null,o.a.createElement("p",null,"create-react-app.js \u4e2d\u901a\u8fc7\u8c03\u7528executeNodeScript \u51fd\u6570\u5f00\u542f\u5b50\u8fdb\u7a0b\u6267\u884creact-scripts \u4e2d\u7684init.js")),o.a.createElement("h6",{id:"initjs"},o.a.createElement(r["AnchorLink"],{to:"#initjs","aria-hidden":"true",tabIndex:-1},o.a.createElement("span",{className:"icon icon-link"})),"init.js"),o.a.createElement(s["a"],{code:"\u751f\u6210\u57fa\u672c\u7684\u9879\u76ee\u9aa8\u67b6\n -> \u83b7\u53d6 react-script \u7edd\u5bf9\u8def\u5f84\n -> \u68c0\u6d4b\u76ee\u6807\u7a0b\u5e8f\u662f\u5426\u5b58\u5728yarn.lock\n -> \u914d\u7f6e\u5e76\u5199\u5165package.json\n -> \u4e3a\u7528\u6237\u62f7\u8d1d\u6587\u4ef6\n -> \u521d\u59cb\u5316 git",lang:"js"}),o.a.createElement("h3",{id:"\u4ee3\u7801\u6ce8\u91ca-1"},o.a.createElement(r["AnchorLink"],{to:"#\u4ee3\u7801\u6ce8\u91ca-1","aria-hidden":"true",tabIndex:-1},o.a.createElement("span",{className:"icon icon-link"})),"\u4ee3\u7801\u6ce8\u91ca"),o.a.createElement(s["a"],{code:"// @remove-file-on-eject\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\n// Makes the script crash on unhandled rejections instead of silently\n// ignoring them. In the future, promise rejections that are not handled will\n// terminate the Node.js process with a non-zero exit code.\nprocess.on('unhandledRejection', err => {\n  throw err;\n});\n\nconst fs = require('fs-extra');\nconst path = require('path');\nconst chalk = require('react-dev-utils/chalk');\nconst execSync = require('child_process').execSync;\nconst spawn = require('react-dev-utils/crossSpawn');\nconst os = require('os');\nconst verifyTypeScriptSetup = require('./utils/verifyTypeScriptSetup');\n\nfunction isInGitRepository() {\n  try {\n    execSync('git rev-parse --is-inside-work-tree', { stdio: 'ignore' });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction isInMercurialRepository() {\n  try {\n    execSync('hg --cwd . root', { stdio: 'ignore' });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction tryGitInit(appPath) {\n  let didInit = false;\n  try {\n    execSync('git --version', { stdio: 'ignore' });\n    if (isInGitRepository() || isInMercurialRepository()) {\n      return false;\n    }\n\n    execSync('git init', { stdio: 'ignore' });\n    didInit = true;\n\n    execSync('git add -A', { stdio: 'ignore' });\n    execSync('git commit -m \"Initial commit from Create Emptyd App\"', {\n      stdio: 'ignore',\n    });\n    return true;\n  } catch (e) {\n    if (didInit) {\n      // If we successfully initialized but couldn't commit,\n      // maybe the commit author config is not set.\n      // In the future, we might supply our own committer\n      // like Ember CLI does, but for now, let's just\n      // remove the Git files to avoid a half-done state.\n      try {\n        // unlinkSync() doesn't work on directories.\n        fs.removeSync(path.join(appPath, '.git'));\n      } catch (removeErr) {\n        // Ignore.\n      }\n    }\n    return false;\n  }\n}\n\nmodule.exports = function(\n  appPath,   // \u521b\u5efa\u5e94\u7528\u7a0b\u5e8f\u7684\u4e3b\u8def\u5f84\n  appName,   // \u5e94\u7528\u540d\u79f0\n  verbose,   // \u6253\u989d\u5916\u7684\u65e5\u5fd7\u4fe1\u606f \n  originalDirectory, //\u811a\u624b\u67b6\u547d\u4ee4\u884c\u6240\u5728\u5de5\u4f5c\u76ee\u5f55\n  template   // \u4f7f\u7528\u5185\u6d4b\u7248\u672c\u7684\u6a21\u7248\u6587\u4ef6\n) {\n  // \u83b7\u53d6 react-script \u7edd\u5bf9\u8def\u5f84\n  const ownPath = path.dirname(\n    require.resolve(path.join(__dirname, '..', 'package.json'))\n  );\n  // \u76ee\u6807\u7a0b\u5e8f\u7684package.json \n  const appPackage = require(path.join(appPath, 'package.json'));\n  // \u68c0\u6d4b\u76ee\u6807\u7a0b\u5e8f\u662f\u5426\u5b58\u5728yarn.lock\n  const useYarn = fs.existsSync(path.join(appPath, 'yarn.lock'));\n\n  // // Copy over some of the devDependencies\n  appPackage.dependencies = appPackage.dependencies || {};\n\n  const useTypeScript = appPackage.dependencies['typescript'] != null;\n\n  // Setup the script rules\n  const precommitMsg = \"precommit-msg\";\n\n  appPackage.scripts = {\n    start: \"ts-node -P config/tsconfig-for-webpack-config.json scripts/start.ts\",\n    build: \"ts-node -P config/tsconfig-for-webpack-config.json scripts/build.ts\",\n    ls: \"http-server dist\",\n    upload: \"gulp\",\n    lint: \"eslint src --ext .tsx\",\n    [precommitMsg]: \"echo 'Pre-commit checks...' && exit 0\"\n  };\n\n  // Setup the eslint config\n  appPackage[\"pre-commit\"] = [\n    \"precommit-msg\",\n    \"lint\"\n  ];\n  // Setup the browsers list\n  appPackage.browserslist = [\n    \"chrome >= 20\",\n    \"Firefox >= 20\",\n    \"ios>3\",\n    \"Android >= 3.2\",\n    \"maintained node versions\"\n  ];\n  // \u914d\u7f6e\u5e76\u5199\u5165package.json\n  fs.writeFileSync(\n    path.join(appPath, 'package.json'),\n    JSON.stringify(appPackage, null, 2) + os.EOL\n  );\n\n  const readmeExists = fs.existsSync(path.join(appPath, 'README.md'));\n  if (readmeExists){\n    fs.renameSync(\n      path.join(appPath, 'README.md'),\n      path.join(appPath, 'README.old.md')\n    );\n  }\n\n  // \u4e3a\u7528\u6237\u62f7\u8d1d\u6587\u4ef6 \n  const templatePath = template\n    ? path.resolve(originalDirectory, template)\n    : path.join(ownPath, useTypeScript ? 'template-typescript' : 'template');\n  if (fs.existsSync(templatePath)) {\n    fs.copySync(templatePath, appPath);\n  } else {\n    console.error(\n      `Could not locate supplied template: ${chalk.green(templatePath)}`\n    );\n    return;\n  }\n\n  // Rename gitignore after the fact to prevent npm from renaming it to .npmignore\n  // See: https://github.com/npm/npm/issues/1862\n  try {\n    fs.moveSync(\n      path.join(appPath, 'gitignore'),\n      path.join(appPath, '.gitignore'),\n      []\n    );\n  } catch (err) {\n    // Append if there's already a `.gitignore` file there\n    if (err.code === 'EEXIST') {\n      const data = fs.readFileSync(path.join(appPath, 'gitignore'));\n      fs.appendFileSync(path.join(appPath, '.gitignore'), data);\n      fs.unlinkSync(path.join(appPath, 'gitignore'));\n    } else {\n      throw err;\n    }\n  }\n\n  let command;\n  let args;\n\n  if (useYarn) {\n    command = 'yarnpkg';\n    args = ['add'];\n  } else {\n    command = 'npm';\n    args = ['install', '--save', verbose && '--verbose'].filter(e => e);\n  }\n  args.push('react', 'react-dom');\n\n  // Install additional template dependencies, if present\n  const templateDependenciesPath = path.join(\n    appPath,\n    '.template.dependencies.json'\n  );\n  if (fs.existsSync(templateDependenciesPath)) {\n    const templateDependencies = require(templateDependenciesPath).dependencies;\n    args = args.concat(\n      Object.keys(templateDependencies).map(key => {\n        return `${key}@${templateDependencies[key]}`;\n      })\n    );\n    fs.unlinkSync(templateDependenciesPath);\n  }\n\n  // Install react and react-dom for backward compatibility with old CRA cli\uff0c\n  // which doesn't install react and react-dom along with react-scripts\uff0c\n  // or template is presetend (via --internal-testing-template).\n  if (!isReactInstalled(appPackage) || template) {\n    console.log(`Installing react and react-dom using ${command}...`);\n    console.log();\n\n    const proc = spawn.sync(command, args, { stdio: 'inherit' });\n    if (proc.status !== 0) {\n      console.error(`\\`${command} ${args.join(' ')}\\` failed`);\n      return;\n    }\n  }\n\n  if (useTypeScript) {\n    verifyTypeScriptSetup();\n  }\n  // \u521d\u59cb\u5316 git\n  if (tryGitInit(appPath)) {\n    console.log();\n    console.log('Initialized a git repository.');\n  }\n\n  // Display the most elegant way to cd.\n  // This needs to handle an undefined originalDirectory for\n  // backward compatibility with old global-cli's.\n  let cdpath;\n  if (originalDirectory && path.join(originalDirectory, appName) === appPath) {\n    cdpath = appName;\n  } else {\n    cdpath = appPath;\n  }\n\n  // Change displayed command to yarn instead of yarnpkg\n  const displayedCommand = useYarn ? 'yarn' : 'npm';\n  console.log();\n  console.log(`Success! Created ${appName} at ${appPath}`);\n  console.log('Inside that directory, you can run several commands:');\n  console.log();\n  console.log(chalk.cyan(`  ${displayedCommand} start`));\n  console.log('    Starts the development server.');\n  console.log();\n  console.log(\n    chalk.cyan(`  ${displayedCommand} ${useYarn ? '' : 'run '}build`)\n  );\n  console.log('    Bundles the app into static files for production.');\n  console.log();\n  console.log(chalk.cyan(`  ${displayedCommand} test`));\n  console.log('    Starts the test runner.');\n  console.log();\n  console.log(\n    chalk.cyan(`  ${displayedCommand} ${useYarn ? '' : 'run '}eject`)\n  );\n  console.log(\n    '    Removes this tool and copies build dependencies, configuration files'\n  );\n  console.log(\n    '    and scripts into the app directory. If you do this, you can\u2019t go back!'\n  );\n  console.log();\n  console.log('We suggest that you begin by typing:');\n  console.log();\n  console.log(chalk.cyan('  cd'), cdpath);\n  console.log(`  ${chalk.cyan(`${displayedCommand} start`)}`);\n  if (readmeExists) {\n    console.log();\n    console.log(\n      chalk.yellow(\n        'You had a `README.md` file, we renamed it to `README.old.md`'\n      )\n    );\n  }\n  console.log();\n  console.log('Happy hacking!');\n};\n\nfunction isReactInstalled(appPackage) {\n  const dependencies = appPackage.dependencies || {};\n\n  return (\n    typeof dependencies.react !== 'undefined' &&\n    typeof dependencies['react-dom'] !== 'undefined'\n  );\n}",lang:"js"})))}));e["default"]=n=>{var e=o.a.useContext(r["context"]),t=e.demos;return o.a.useEffect((()=>{var e;null!==n&&void 0!==n&&null!==(e=n.location)&&void 0!==e&&e.hash&&r["AnchorLink"].scrollToAnchor(decodeURIComponent(n.location.hash.slice(1)))}),[]),o.a.createElement(i,{demos:t})}}}]);